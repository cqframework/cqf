{
  "resourceType": "Library",
  "id": "FHIRHelpersTests",
  "meta": {
    "profile": [ "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-shareablelibrary", "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-computablelibrary", "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-publishablelibrary", "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-executablelibrary" ]
  },
  "extension": [ {
    "url": "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-knowledgeCapability",
    "valueCode": "shareable"
  }, {
    "url": "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-knowledgeCapability",
    "valueCode": "computable"
  }, {
    "url": "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-knowledgeCapability",
    "valueCode": "publishable"
  }, {
    "url": "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-knowledgeCapability",
    "valueCode": "executable"
  }, {
    "url": "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-knowledgeRepresentationLevel",
    "valueCode": "structured"
  } ],
  "version": "4.0.1",
  "name": "FHIRHelpersTests",
  "title": "FHIR HelpersTests",
  "status": "active",
  "experimental": true,
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "date": "2020-11-29T15:54:22-07:00",
  "description": "This library defines test cases for FHIRHelpers functionality",
  "approvalDate": "2021-03-12",
  "lastReviewDate": "2021-03-12",
  "topic": [ {
    "text": "FHIR"
  }, {
    "text": "CQL"
  } ],
  "relatedArtifact": [ {
    "type": "documentation",
    "display": "Using FHIR Helpers",
    "url": "https://github.com/cqframework/clinical_quality_language/wiki/FHIRHelpers"
  }, {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIRHelpers|4.0.1"
  } ],
  "parameter": [ {
    "name": "TestInstant",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "instant"
  }, {
    "name": "TestInstantConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestTime",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "time"
  }, {
    "name": "TestTimeConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestHour",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "time"
  }, {
    "name": "TestHourConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestMinute",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "time"
  }, {
    "name": "TestMinuteConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestSecond",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "time"
  }, {
    "name": "TestSecondConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestDate",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "date"
  }, {
    "name": "TestDateConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestYear",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "date"
  }, {
    "name": "TestYearConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestMonth",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "date"
  }, {
    "name": "TestMonthConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestDateTime",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "dateTime"
  }, {
    "name": "TestDateTimeConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestYearDateTime",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "dateTime"
  }, {
    "name": "TestYearDateTimeConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestMonthDateTime",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "dateTime"
  }, {
    "name": "TestMonthDateTimeConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestDayDateTime",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "dateTime"
  }, {
    "name": "TestDayDateTimeConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestHourDateTime",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "dateTime"
  }, {
    "name": "TestHourDateTimeConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestMinuteDateTime",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "dateTime"
  }, {
    "name": "TestMinuteDateTimeConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestSecondDateTime",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "dateTime"
  }, {
    "name": "TestSecondDateTimeConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestBase64Binary",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "base64Binary"
  }, {
    "name": "TestBase64BinaryConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestDecimal",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "decimal"
  }, {
    "name": "TestDecimalConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestBoolean",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestBooleanConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestUri",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "uri"
  }, {
    "name": "TestUriConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestUrl",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "url"
  }, {
    "name": "TestUrlConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestUrlSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestCanonical",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "canonical"
  }, {
    "name": "TestCanonicalConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestCanonicalSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestUuid",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "uuid"
  }, {
    "name": "TestUuidConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestUuidSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestOid",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "oid"
  }, {
    "name": "TestOidConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestOidSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestInteger",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "integer"
  }, {
    "name": "TestIntegerConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestIntegerSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestUnsignedInt",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "unsignedInt"
  }, {
    "name": "TestUnsignedIntConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestUnsignedIntSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestPositiveInt",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "positiveInt"
  }, {
    "name": "TestPositiveIntConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestPositiveIntSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestString",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "TestStringConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestCode",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "code"
  }, {
    "name": "TestCodeConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestCodeSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestMarkdown",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "markdown"
  }, {
    "name": "TestMarkdownConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestMarkdownSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestId",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "id"
  }, {
    "name": "TestIdConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestIdSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestRatio",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Ratio"
  }, {
    "name": "TestRatioConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestPeriod",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Period"
  }, {
    "name": "TestPeriodConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestRange",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Range"
  }, {
    "name": "TestRangeConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestCoding",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Coding"
  }, {
    "name": "TestCodingConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestCodeableConcept",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "CodeableConcept"
  }, {
    "name": "TestCodeableConceptConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestQuantity",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "TestQuantityConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestAge",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Age"
  }, {
    "name": "TestAgeConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestAgeSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestDistance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Distance"
  }, {
    "name": "TestDistanceConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestDistanceSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestDuration",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Duration"
  }, {
    "name": "TestDurationConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestDurationSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestCount",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Count"
  }, {
    "name": "TestCountConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestCountSpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestSimpleQuantity",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "SimpleQuantity"
  }, {
    "name": "TestSimpleQuantityConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestSimpleQuantitySpecificallyConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestQuantityWithoutComparator",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "TestQuantityWithoutComparatorConverts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestQuantityWithComparator1",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "TestQuantityWithComparator1Converts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestQuantityWithComparator2",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "TestQuantityWithComparator2Converts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestQuantityWithComparator3",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "TestQuantityWithComparator3Converts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "TestQuantityWithComparator4",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "TestQuantityWithComparator4Converts",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}
